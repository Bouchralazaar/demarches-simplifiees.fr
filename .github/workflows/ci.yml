name: Continuous Integration
on:
  push:
    branches: ['devpf', 'masterpf', 'issue/*', 'feature/*']
  pull_request:
    branches: ['devpf', 'masterpf', 'issue/*', 'feature/*']

jobs:
  linters:
    name: Linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: JS package cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          yarn install --frozen-lockfile

      - name: Run linters
        run: |
          bundle exec rake lint

  tests:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: tps_test
          POSTGRES_DB: tps_test
          POSTGRES_PASSWORD: tps_test
        ports: ["5432:5432"]

    strategy:
      matrix:
        pattern:
          - bin/rake zeitwerk:check
          - bin/rspec spec/controllers/*_spec.rb
          - bin/rspec spec/controllers/[a-l]**/*_spec.rb
          - bin/rspec spec/controllers/[m-z]**/*_spec.rb
          - bin/rspec spec/system
          - bin/rspec spec/helpers spec/lib spec/middlewares
          - bin/rspec spec/mailers spec/jobs spec/policies
          - bin/rspec spec/models
          - bin/rspec spec/serializers spec/services
          - bin/rspec spec/views

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: JS package cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          yarn install --frozen-lockfile

      - name: Setup test database
        env:
          RAILS_ENV: test
          DATABASE_URL: "postgres://tps_test@localhost:5432/tps_test"
        run: |
          bundle exec rake db:create db:schema:load db:migrate

      - name: Setup environment variables
        run: |
          cp config/env.example .env

      - name: Run tests
        run: ${{ matrix.pattern }}

  docker:
    runs-on: ubuntu-latest
    needs: [tests, linters]
    env:
      repo: "govpf/mes-demarches"
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: ${{ env.repo }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    -
      name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
    - name: Update repo description
      uses: peter-evans/dockerhub-description@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: "${{ env.repo }}"
